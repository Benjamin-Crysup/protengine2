
import os
import re
import sys
import suffer

digPat = re.compile("\\d+")

protLoc = sys.argv[1]
workLoc = sys.argv[2]
lookFile = sys.argv[3]
profLoc = sys.argv[4]

suffArr = suffer.ProteosSuffixWrapper(profLoc, protLoc)
pepSearch = suffer.ProteosPeptideSearch(lookFile, workLoc)

# load ENSP/G/T data from protLoc
varIDF = open(os.path.join(protLoc, "varids.tsv"))
pDatMap = {}
for line in varIDF:
    if line.strip() == "":
        continue
    lineS = line.split()
    protNam = lineS[0]
    perInd = protNam.find(".")
    if perInd >= 0:
        protNam = protNam[:perInd]
    tranNam = lineS[1]
    perInd = tranNam.find(".")
    if perInd >= 0:
        tranNam = tranNam[:perInd]
    geneNam = lineS[2]
    perInd = geneNam.find(".")
    if perInd >= 0:
        geneNam = geneNam[:perInd]
    pDatMap[protNam] = [tranNam, geneNam]
varIDF.close()

outLoc = os.path.join(workLoc, "proteos.tsv")
outF = open(outLoc, "w")
toPrin = ["peptide_seqll", "snp_location_genome", "sap_location_protein", "sap_location_peptide", "chromosome", "ensembl_gene_id"]
toPrin = toPrin + ["ensembl_transcript_id", "ensembl_protein_id", "protein_location_genome", "peptide_location_genome"]
toPrin = toPrin + ["sap_location_transcript", "peptide_start_transcript", "peptide_end_transcript", "peptide_start_reference", "peptide_end_reference"]
outF.write("\t".join(toPrin) + "\n")

curEnt = pepSearch.getNextMatch()
while not (curEnt is None):
    # need to get
    # peptide_seqll
    peptideSeqL = curEnt.sequence
    # ensembl_protein_id: can get from curEnt.names
    # ensembl_gene_id: need to add to protein data
    ensProtID = ""
    ensGeneID = ""
    ensTranID = ""
    if len(curEnt.names) > 0:
        ensProtID = curEnt.names[0]
        undInd = ensProtID.find("_")
        if undInd >= 0:
            ensProtID = ensProtID[:undInd]
        if ensProtID in pDatMap:
            curPDat = pDatMap[ensProtID]
            ensTranID = curPDat[0]
            ensGeneID = curPDat[1]
    # snp_location_genome: need to parse "|".join(curEnt.getFullPeptideVariants()) into this and the next
    # sap_location_protein
    snpLocGen = ""
    sapLocPro = ""
    sinSapPro = 0
    if len(curEnt.names) > 0:
        # amino acid changes are going to be split by ;
        aaChange = curEnt.varDiff[0]
        if len(aaChange) != 0:
            aaChange = aaChange[0]
            for sinChange in aaChange.split(';'):
                aanaSpl = sinChange.split(':')
                if len(aanaSpl) != 2:
                    sys.stderr.write(ensProtID + ": Questionable variant " + sinChange + "\n")
                if len(sapLocPro) == 0:
                    digM = digPat.search(aanaSpl[0])
                    if not (digM is None):
                        sinSapPro = int(aanaSpl[0][digM.span()[0] : digM.span()[1]])
                sapLocPro = sapLocPro + ("," if (len(sapLocPro) > 0) else "") + aanaSpl[0]
                snpLocGen = snpLocGen + ("," if (len(snpLocGen) > 0) else "") + aanaSpl[1]
    sinSapPro = sinSapPro - 1
    # protein_location_genome: chr:start:end:direction  1based location of the start of the protein
    # peptide_location_genome: chr:start-end  same as before
    # sap_location_peptide: need to parse location data
    # sap_location_transcript: 1 based index in protein of sap
    # peptide_start_transcript: 1 based index of the start of the peptide in the variant protein
    # peptide_end_transcript: 1 based index of the end of the peptide in the variant protein
    # peptide_start_reference: 1 based index of the start of the peptide in the reference protein
    # peptide_end_reference: 1 based index of the end of the peptide in the reference protein
    # chromosome: location data
    proLocGen = ""
    pepLocGen = ""
    sapLocPep = ""
    sapLocTran = ""
    pepStartTran = ""
    pepEndTran = ""
    pepStartPro = ""
    pepEndPro = ""
    chrom = ""
    if len(curEnt.names) > 0:
        matDat = curEnt.matches[0]
        matStart = matDat[2]
        matEnd = matDat[3]
        tranCig = curEnt.varCigs[0]
        locData = curEnt.protLocs[0]
        if len(locData) != 0:
            # get the protein genome data first
            chrom = locData[0][0]
            # expand the location data into triples
            isPos = locData[0][3]
            haveWarn = False
            fullLocs = []
            for ldat in locData:
                if ldat[3] != isPos:
                    sys.stderr.write(ensProtID + ": Transcript uses both strands...\n")
                    break
                for i in range(ldat[1], ldat[2]):
                    fullLocs.append(i)
                    if (ldat[0] != chrom) and not haveWarn:
                        sys.stderr.write(ensProtID + ": Multiple chromosomes in location data " + chrom + " and " + ldat[0] + "\n")
            if not isPos:
                fullLocs = list(reversed(fullLocs))
            tmpLocs = []
            i = 0
            while i < len(fullLocs):
                if i+3 > len(fullLocs):
                    sys.stderr.write(ensProtID + ": location data not divisible by 3.\n")
                    break
                tmpLocs.append([fullLocs[i], fullLocs[i+1], fullLocs[i+2]])
                i = i + 3
            fullLocs = tmpLocs
            # figure out the mapping for the cigars
            tmpCig = [i for i in range(matEnd)]
            if tranCig == "???":
                sys.stderr.write(ensProtID + ": missing")
            else:
                try:
                    cigReg = suffer.cigarStringToReferencePositions(0, tranCig)
                    if (cigReg[0] > 0) or (cigReg[1] > 0):
                        raise ValueError("Soft clip in protein cigar.")
                    if len(cigReg[2]) < matEnd:
                        raise ValueError("Search reports match beyond end of the cigar.")
                    tmpCig = cigReg[2]
                except ValueError as err:
                    errMess = getattr(err, 'message', repr(err))
                    sys.stderr.write(ensProtID + ": bad cigar " + tranCig + ": " + errMess + "\n")
            # make sure fullLocs has the right length
            haveWarnCigGff = False
            for i in range(len(tmpCig)):
                curCI = tmpCig[i]
                if curCI >= len(fullLocs):
                    if not haveWarnCigGff:
                        haveWarnCigGff = True
                        sys.stderr.write(ensProtID + ": cigar extends beyond location data\n")
                    tmpCig[i] = -1
            # protein_location_genome: chr:start:end:direction  1based location of the start of the protein
            proLocGen = []
            for ldat in locData:
                if len(proLocGen) > 0:
                    proLocGen.append("|")
                proLocGen.extend(":".join([ldat[0], repr(ldat[1]), repr(ldat[2]), "+" if ldat[3] else "-"]))
            proLocGen = "".join(proLocGen)
            # peptide_location_genome: chr:start-end  same as before
            pepLocs = []
            for i in range(matStart,matEnd):
                curRI = tmpCig[i]
                if curRI < 0:
                    pepLocs.append(-1)
                else:
                    pepLocs.extend(fullLocs[curRI])
            expDiff = 1 if isPos else -1
            i = 0
            while i < len(pepLocs):
                if pepLocs[i] < 0:
                    while i < len(pepLocs):
                        if pepLocs[i] >= 0:
                            break
                        i = i + 1
                    pepLocGen = pepLocGen + ("|" if (len(pepLocGen) > 0) else "") + "-1"
                else:
                    pepLocGen = pepLocGen + ("|" if (len(pepLocGen) > 0) else "") + chrom + ":" + repr(pepLocs[i])
                    origLoc = pepLocs[i]
                    lastLoc = pepLocs[i]
                    i = i + 1
                    while i < len(pepLocs):
                        if pepLocs[i] != (lastLoc + expDiff):
                            break
                        lastLoc = pepLocs[i]
                        i = i + 1
                    if origLoc != lastLoc:
                        pepLocGen = pepLocGen + "-" + repr(lastLoc)
            # sap_location_transcript: 1 based index in protein of sap
            sinSapTran = -1
            for i in range(len(tmpCig)):
                if tmpCig[i] == sinSapPro:
                    sinSapTran = i
                    break
            sapLocTran = repr(sinSapTran + 1) if (sinSapTran >= 0) else "-1"
            # sap_location_peptide: need to parse location data
            sapLocPep = repr((sinSapTran - matStart) + 1) if (sinSapTran >= 0) else "-1"
            # peptide_start_transcript: 1 based index of the start of the peptide in the variant protein
            # peptide_end_transcript: 1 based index of the end of the peptide in the variant protein
            pepStartTran = repr(1 + matStart)
            pepEndTran = repr(matEnd)
            # peptide_start_reference: 1 based index of the start of the peptide in the reference protein
            # peptide_end_reference: 1 based index of the end of the peptide in the reference protein
            pepStartPro = len(tmpCig)
            pepEndPro = -1
            for cigI in tmpCig:
                if cigI >= 0:
                    pepStartPro = min(pepStartPro, cigI)
                    pepEndPro = max(pepEndPro, cigI)
            pepStartPro = repr(pepStartPro+1)
            pepEndPro = repr(pepEndPro+1)
    # print and go to next
    toPrin = [peptideSeqL, snpLocGen, sapLocPro, sapLocPep, chrom, ensGeneID, ensTranID, ensProtID, proLocGen, pepLocGen, sapLocTran, pepStartTran, pepEndTran, pepStartPro, pepEndPro]
    outF.write("\t".join(toPrin) + "\n")
    curEnt = pepSearch.getNextMatch()
outF.close()

